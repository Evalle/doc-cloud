<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-daps:xslt:profiling:novdoc-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "IGNORE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.adm.cli">
 <title>Using &ostack; Command Line Clients</title>
 <abstract>
  &cli-descr-short;
 </abstract>
<!--taroth 2012-07-31: implementation of unified command lines tools is WIP:
  http://wiki.openstack.org/UnifiedCLI, 
  http://wiki.openstack.org/UnifiedCLI/Mapping, 
  http://wiki.openstack.org/UnifiedCLI/HumanInterfaceGuidelines,
  glance client  is part of that unifcation effort-->
 <sect1 id="cha.adm.cli.oview">
  <title>&ostack; Commands&mdash;Overview</title>
 
  &openstack-python-tools;  
  
  </sect1>
 <sect1 id="sec.adm.cli.rc">
  <title>&ostack; RC File</title>
  &rc-file-usage;
  </sect1>
 <sect1 id="sec.adm.cli.projects.users">
  <title>Managing Projects and Users</title>
  &projects;
  <para>
   The <systemitem class="resource">python-keystoneclient</systemitem>
   provides the <command>keystone</command> command line tool which you can
   use to manage projects and users from any machine outside the cloud.
   Prior to using the tool, download and source an &ostack; RC file. For
   details, refer to <xref linkend="sec.adm.cli.rc"/>.
  </para>

  <note>
   <title>Administrator Credentials</title>
   <para>
    Administering projects and users requires administrator credentials.
    Make sure to download and source the &ostack; RC file as administrator
    prior to running <command>keystone</command> commands. Alternatively,
    export the respective environment variables, using the token or password
    authentication method. For details, refer to
    <ulink url="http://docs.openstack.org/grizzly/openstack-compute/admin/content/adding-users-tenants-and-roles-with-python-keystoneclient.html"></ulink>
   </para>
  </note>

  <sect2 id="sec.adm.cli.projects.manage">
   <title>Viewing, Creating, Disabling, or Deleting Projects</title>
   <para>
    Find examples for the key administration tasks below.
   </para>
   <variablelist>
    <varlistentry>
     <term>Listing All Projects</term>
     <listitem>
<screen>keystone tenant-list</screen>
      <para>
       Lists all projects with their ID, name, and the information if they
       are enabled or not.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Creating a Project</term>
     <listitem>
<screen>keystone tenant-create --name <replaceable>PROJECT_NAME</replaceable>&nbsp;</screen>
      <para>
       Creates a new project with the specified name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Temporarily Disabling a Project</term>
     <listitem>
<screen>keystone tenant-update <replaceable>PROJECT_ID_OR_NAME</replaceable> --enabled false</screen>
      <para>
       For the details of the impact, refer to
       <xref linkend="il.disabled.projects"/> .
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Deleting a Project</term>
     <listitem>
<screen>keystone tenant-delete <replaceable>PROJECT_ID_OR_NAME</replaceable>&nbsp;</screen>
      <para>
       Deletes the specified project.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="sec.adm.cli.user.manage">
   <title>Viewing, Creating, Disabling, or Deleting User Accounts</title>
   <para>
    Find examples for the key administration tasks below.
   </para>
   <variablelist>
    <varlistentry>
     <term>Listing All Users</term>
     <listitem>
<screen>keystone user-list</screen>
      <para>
       Lists all user accounts with their ID, name, e-mail address, and the
       information if they are enabled or not.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Creating a User Account</term>
     <listitem>
<screen>keystone user-create --name <replaceable>USER_NAME</replaceable> --tenant_id <replaceable>PROJECT_ID</replaceable> \
  --pass <replaceable>PRELIM_PASSWD</replaceable>&nbsp;</screen>
      <para>
       Creates a new user with the specified name. While the only required
       argument is <option>--name</option>, at least specify the optional
       parameters <option>--tenant_id</option> and <option>--pass</option>.
       Otherwise the newly created user cannot log in to the &cloud; &dash;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Temporarily Disabling a User Account</term>
     <listitem>
<screen>keystone user-update <replaceable>USER_ID_OR_NAME</replaceable> --enabled false</screen>
      <para>
       If you disable a user account, the user can no longer log in, but his
       data is kept so that the account can be re-enabled at any time.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Deleting a User Account</term>
     <listitem>
<screen>keystone user-delete <replaceable>USER_ID_OR_NAME</replaceable>&nbsp;</screen>
      <para>
       Deletes the specified user account.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="sec.adm.cli.roles">
   <title>Managing Roles</title>
   <para>
    Roles define the actions that the user is allowed to perform. Configure
    roles in &ostack; &ident; (&o_ident;). Actions are defined per &ostack;
    service in the respective
    <filename>/etc/[SERVICE_CODENAME]/policy.json</filename> file, for
    example in <filename>/etc/nova/policy.json</filename> for the &ostack;
    &comp; service (&o_comp;).
   </para>
   <para>
    Find examples for the key administration tasks below.
   </para>
   <variablelist>
    <varlistentry>
     <term>Listing All Roles</term>
     <listitem>
<screen>keystone role-list</screen>
      <para>
       Lists all roles with their ID and name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Creating a Role</term>
     <listitem>
<screen>keystone role-create --name=<replaceable>ROLE_NAME</replaceable>&nbsp;</screen>
      <para>
       Creates a role with the specified name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Deleting a Role</term>
     <listitem>
<screen>keystone role-delete <replaceable>ROLE_ID_OR_NAME</replaceable>&nbsp;</screen>
      <para>
       Deletes the specified role.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="sec.adm.cli.assign">
   <title>Modifying User Assignments for a Project</title>
   <para>
    Whereas each user is assigned to a primary project when his user account
    is created, users can be members of multiple projects. The keystone
    client does not allow to directly assign users to additional projects.
    Instead you need to define a role and grant that role to a user-project
    pair.
   </para>
   <procedure>
    <step>
     <para>
      On a shell, source the &ostack; RC file. For details, refer to
      <xref linkend="sec.adm.cli.rc"/>.
     </para>
    </step>
    <step>
     <para>
      Check if there is already a <literal>member</literal> role defined:
     </para>
<screen>keystone role-list</screen>
    </step>
    <step>
     <para>
      If not, create it:
     </para>
<screen>keystone role-create --name=member</screen>
    </step>
<!--taroth 2013-08-28: IDs are no longer needed, the commands have become
     more user-friendly in the meantime, NAME is enough-->
<!--<step>
     <para>
      To grant the role to a user-project pair (and to thus assign a user to
      this project), you need to know the IDs of the role, the user, and the
      project. You can look them up with <command>keystone
      role-list</command>, <command>keystone user-list</command>, and
      <command>keystone tenant-list</command>.
     </para>
    </step>-->
    <step>
     <para>
      To grant the user membership of a project:
     </para>
<screen>keystone user-role-add&nbsp;--user&nbsp;<replaceable>USER_NAME</replaceable>&nbsp;--role&nbsp;<replaceable>ROLE_NAME</replaceable> \
  --tenant <replaceable>TENANT_NAME</replaceable> 
  </screen>
    </step>
    <step>
     <para>
      To assign the user to multiple projects, repeat the last step.
     </para>
    </step>
    <step>
     <para>
      To verify the assignments, use:
     </para>
<screen>keystone&nbsp;user-role-list&nbsp;--user&nbsp;<replaceable>USER_NAME</replaceable>&nbsp;--tenant&nbsp;<replaceable>TENANT_NAME</replaceable>&nbsp;</screen>
<!--taroth 2012-08-09: expected this to work differently, see bnc#775273-->
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 id="sec.adm.cli.img">
  <title>Managing Images</title>

  &images;
  
  &img-manage;
  
  &img-ownership;
  
  <para>
   Images can either be uploaded to &productname; with the
   <command>glance</command> command line tool or with the &productname;
   &dash;. As the &dash; comes with some limitations with regards to image
   upload and modification of properties, it is recommended to use the
   <command>glance</command> command line tools for comprehensive image
   management.
  </para>

<!--taroth 2012-08-08: source: 
   http://docs.openstack.org/diablo/openstack-image-service/admin/os-image-adminguide-diablo.pdf-->

  <sect2 id="sec.adm.cli.img.build">
   <title>Building Images with &susestudio;</title>
   <para> To build the images to use within the cloud, use &susestudio; or &suseonsite;.
    When creating an appliance for &productname; the
    following steps are essential: </para>
   <procedure>
    <step>
     <para>In &susestudio; or &suseonsite;, switch to the <menuchoice>
       <guimenu>Configuration</guimenu>
       <guimenu>Appliance</guimenu>
      </menuchoice> tab.</para>
    </step>
    <step>
     <para>Enable the <guimenu>Integrate with &productname;/&ostack;</guimenu> checkbox.
     </para>
    </step>
    <step>
     <para>On the <guimenu>Build</guimenu> tab, choose the respective appliance format. It mainly
      depends on the hypervisor on which you want to use the image&mdash;see <xref
      linkend="vl.adm.img.req.virt"/>.</para>
    </step>
   </procedure>
   <para>For more detailed information on how to build
    appliance images, refer to the <citetitle>&suseonsite; Quick Start</citetitle> or the
     <citetitle>&suseonsite; User Guide</citetitle>, available at <ulink
     url="http://www.suse.com/documentation/suse_studio/"/>. </para>
  
   <sect3 id="sec.adm.cli.img.build.req">
    <title>Image Requirements</title>
    <para>Make sure any images that you build for &productname; fulfill the following general
     requirements:</para>
    <itemizedlist id="vl.adm.img.req.general">
     <title>General Image Requirements</title>
     <listitem>
      <para> The network is set to DHCP. </para>
     </listitem>
     <listitem>
      <para> The image does not include &yast;2 Firstboot. </para>
     </listitem>
     <listitem>
      <para> The image does not include any end-user license agreement (EULA) dialogs. </para>
     </listitem>
     <listitem>
      <para> The image contains the <systemitem class="resource">cloud-init</systemitem> package.
       The package will be automatically added to the image if the following checkbox in
       &susestudio; or &suseonsite; is enabled: <guimenu>Integrate with &productname;/&ostack;</guimenu>. </para>
      <para> The <systemitem class="resource">cloud-init</systemitem> package contains tools used
       for communication with the instance metadata API, which is provided by &comp;. The
       instance metadata API is specific to each virtual machine and is only accessible from inside
       the VM. The package is needed to pull keypairs into the virtual machine that will run the
       image. </para>
     </listitem>
    </itemizedlist>
    <para> If you intend to manage the image by &ostack; &orch;, you also need to include
     the following package: <systemitem class="resource">openstack-heat-cfntools</systemitem> (part
     of the &productname; ISO). </para>
    <para>Depending on the virtualization platform on which you want to use the image, make sure the
     image also fulfills the following requirements: <remark>taroth 2013-10-02: DEVs, are there more
     requirements to fulfill? what about requirements for &xen; or &hyper;?</remark></para>
    <variablelist id="vl.adm.img.req.virt">
     <title>Image Requirements Depending on Hypervisor</title>
     <varlistentry>
      <term>&kvm;</term>
      <listitem>
        <para>Appliance format: If you are using &susestudio; or
        &suseonsite; 1.3 to build images, use the
         <literal>&productname;/&ostack;/&kvm; (.qcow2)</literal> format.</para>
       <para> If you still use &suseonsite; 1.2 to build images, you choose the <literal>USB
         Stick/Hard Disk Image</literal> format instead and before uploading it to
        &productname;, convert the image to <literal>qcow2</literal>. For details, refer to
         <xref linkend="pro.adm.cli.img.convert" xrefstyle="select:label"/>. </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>&vmware;</term>
      <listitem>
       <para>Appliance format: <literal>VMware/VirtualBox/KVM (.vmdk)</literal>
       </para>
       <para>All images must be flat (that means contained within one file). Both thick and thin
        provisioned <filename>.vmdk</filename> images are supported.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>&hyper;</term>
      <listitem>
       <para>Appliance format: ???</para>
       <para>As &hyper; only supports images in <filename>*.vhd</filename> format, convert the
        image before uploading it to &productname;. For details, refer to <xref
         linkend="pro.adm.cli.img.convert" xrefstyle="select:label"/>. </para>
      </listitem>
     </varlistentry>
    </variablelist>
   
   </sect3>
<!-- <para>
   <remark> taroth 2012-08-09: todo - check with cthiel if it is possible to provide
    an update channel for the images (include update repos etc.)</remark>
   </para>-->
  </sect2>

  <sect2 id="sec.adm.cli.img.upload">
   <title>Adding Images</title>
   <para>
    If you have created an image for
    <literal>&productname;/&ostack;/&kvm;</literal> with &susestudio; or
    with &suseonsite; 1.3, you can upload the image directly as described in
    <xref
     linkend="pro.adm.cli.img.upload"/>. If you used an older
    version of &suseonsite; and have created an image for <literal>USB
    Stick/Hard Disk Image</literal>, convert it first as described in
    <xref linkend="pro.adm.cli.img.convert"/>.
   </para>
   <procedure id="pro.adm.cli.img.convert">
    <title>Converting Disk Images to Different Formats</title>
    <step>
     <!--taroth 2013-08-30: for the records and later revisions: package
      virt-utils is called qemu-tools in openSUSE or newer (info by dmueller) -->
     <para> Make sure the <systemitem class="resource">virt-utils</systemitem> package is installed
      on the machine used for conversion. </para>
    </step>
    <step>
     <para>Download the image from &susestudio;. </para>
    </step>
    <step>
     <para>To convert the image to a different format, use either of the following commands: </para>
     <itemizedlist>
      <listitem>
       <para>For conversion from <literal>raw</literal> to <literal>qcow2</literal>:</para>
       <screen>qemu-img convert -c -f raw -O&nbsp;qcow2&nbsp;<replaceable>CURRENT_IMAGE_FILE</replaceable>&nbsp;<replaceable>FINAL_IMAGE_FILE</replaceable>.qcow2</screen>
      </listitem>
      <listitem>
       <para>For conversion from ??? to <literal>vhd</literal>:</para>
       <screen>qemu-img convert -O vpc&nbsp;<replaceable>CURRENT_IMAGE_FILE</replaceable>&nbsp;<replaceable>FINAL_IMAGE_FILE</replaceable>.vhd</screen>
      </listitem>
     </itemizedlist>
    </step>
   </procedure>
   <procedure id="pro.adm.cli.img.upload">
    <title>Uploading Disk Images to &productname;</title>
    <para>
     The following procedure shows how to upload a disk image using the
     <command>glance</command> command line tool that is contained in the
     package <systemitem class="resource">python-glanceclient</systemitem>.
<!--taroth 2012-11-21: acc. to cthiel, no admin credentials needed for that,
    can be done by any user-->
    </para>
<!--taroth 2013-08-30: according to dmueller, glance does now also accept piped
     images, therefore commenting the note-->
<!--<note>
     <title>Image File Required</title>
     <para> The glance client does not support piping images from standard
      input. In <xref linkend="step.adm.cli.img.upload" xrefstyle="select:label"
      /> therefore make sure that 
      <replaceable>PATH_TO_FINAL_IMAGE_FILE</replaceable> really specifies an
      image file. </para>
     <para>
      <remark>taroth 2013-08-30: DEVs, is the following still valid? I rather
       guess not...</remark>
      If you need to pipe images, use the former glance client version
      <filename>/usr/bin/glance.essex</filename>, which is available from
      the <systemitem class="resource">openstack-glance</systemitem>
      package.
     </para>
    </note>-->
    <para>
     Images have both content and metadata; the latter are also called
     properties. &ostack; &img; does not check any image properties during
     upload. Therefore specify the image's properties as command line
     options. You can do so during image upload (using
     <command>glance&nbsp;image-create</command>) or with
     <command>glance&nbsp;image-update</command> after the image has already
     been uploaded. For details, refer to
     <xref linkend="sec.adm.cli.img.props"
     />.
    </para>
    <step>
     <para>
      In a shell, source the &ostack; RC file for the project that you want
      to upload an image to. For details, refer to
      <xref linkend="sec.adm.cli.rc"/>.
     </para>
    </step>
    <step id="step.adm.cli.img.upload">
     <para>
     Upload the image by using one of  the following commands:</para>
     <itemizedlist>
      <listitem>
       <para>For a <literal>qcow2</literal> image (for use with &kvm;):</para>
       <screen>glance image-create --name="<replaceable>IMAGE_NAME</replaceable>" \
  --is-public=True --container-format=bare \
  --disk-format=qcow2 &lt; <replaceable>PATH_TO_FINAL_IMAGE_FILE</replaceable>.qcow2&nbsp;</screen>
      </listitem>
      <listitem>
       <para>For a <literal>vhd</literal> image (for use with &hyper;): </para>
       <screen>glance image-create --name="<replaceable>IMAGE_NAME</replaceable>" \
 --is-public=True  --container-format=bare \
 --disk-format=vhd &lt; <replaceable>PATH_TO_FINAL_IMAGE_FILE</replaceable>.vhd</screen>
      </listitem>
      <listitem>
       <para>For a <literal>vmdk</literal> image (for use with &vmware;):</para>
       <screen>glance image-create  --name="<replaceable>IMAGE_NAME</replaceable>" \ 
  --is-public=true --container-format=bare \
  --disk-format=vmdk --file&nbsp;<replaceable>PATH_TO_FINAL_IMAGE_FILE</replaceable>.vmdk
       </screen>
       <!--taroth 2013-10-17: fix for https://bugzilla.novell.com/show_bug.cgi?id=838040#c18-->
       <tip>
        <title>Using Different Storage Backend</title>
        <para>With the option <option>--store</option> you can specify a different storage backend
         than the default storage backend that is configured. Possible values for
         <option>--store</option> are:</para>
        <itemizedlist>
         <listitem>
          <para>filesystem</para>
         </listitem>
         <listitem>
          <para>http</para>
         </listitem>
         <listitem>
          <para>rbd</para>
         </listitem>
         <listitem>
          <para>s3</para>
         </listitem>
         <listitem>
          <para>swift</para>
         </listitem>
        </itemizedlist>
       </tip>
      </listitem>
      <!--taroth 2013-10-17: Xen:
       http://docserv.nue.suse.com/documents/SLES/SLES-xen/single-html/#sec.xen.config.disk-->
     </itemizedlist>
   
     <para>
      For specifying additional image properties, refer to
      <xref
       linkend="pro.adm.cli.img.props.modify"/>.
     </para>
    </step>
   </procedure>
   <para>
    If the image upload has been successful, a message appears, displaying
    the ID that has been assigned to the image.
   </para>
   <note>
    <title>Updating Images</title>
    <para>
     <!--taroth 2013-08-29: DEVs, is the following still true or can SUSE Studio inject any
      files into an image which make it possible to change the image?- taroth 2013-10-01: for the records:
     according to aj, studio can inject anything but it cannot change an image--> After having uploaded
     an image to &cloud;, the image contents cannot be modified&mdash;only the image's
     metadata, see <xref linkend="pro.adm.cli.img.props.modify" xrefstyle="select:label"/>. To
     update image contents, you need to delete the current image and upload a modified version of
     the image. You can also launch an instance from the respective image, change it, create a
     snapshot of the instance and use the snapshot as a new image.</para>
   </note>
  </sect2>

  <sect2 id="sec.adm.cli.img.props">
   <title>Modifying Image Properties</title>
<!-- taroth 2013-08-29: fix for https://bugzilla.novell.com/show_bug.cgi?id=828862-->
   &img-props;
  
   <procedure id="pro.adm.cli.img.props.modify">
    <title>Setting Image Properties for Architecture, Hypervisor and VM Mode</title>
    <para> Setting image properties is especially relevant when using mixed virtualization
     environments. For example, to make sure that an image is only launched on appropriate
     hypervisors, you can specify properties referring to a certain architecture, hypervisor type,
     or application binary interface (ABI) that the image requires. Set those properties with the
       <option>--property&nbsp;<replaceable>key</replaceable>&nbsp;<replaceable>value</replaceable></option>
     option. You can do so either directly during image upload (see <xref
      linkend="pro.adm.cli.img.upload" xrefstyle="select:label"/>) or after the image has been
     uploaded (as described below). </para>
    <step>
     <para> In a shell, source the &ostack; RC file for the project that you want to upload an
      image to. For details, refer to <xref linkend="sec.adm.cli.rc"/>. </para>
    </step>
    <step>
     <para> If you do not know the ID or the exact name of the image whose properties you want to
      modify, look it up with: </para>
     <screen>glance&nbsp;image-list</screen>
    </step>
    <step>
     <para>Use the <command>glance&nbsp;image-update</command> command to set the properties for
      architecture, hypervisor type, and virtual machine mode. In the following, find some examples
      with properties for different hypervisors: </para>
     <itemizedlist>
      <listitem>
       <screen>glance&nbsp;image-update&nbsp;<replaceable>IMAGE_ID_OR_NAME</replaceable>&nbsp;\
  --property&nbsp;architecture=x86_64&nbsp;--property&nbsp;hypervisor_type=xen \
  --property&nbsp;vm_mode=xen</screen>
      </listitem>
      <listitem>
       <screen>glance&nbsp;image-update&nbsp;<replaceable>IMAGE_ID_OR_NAME</replaceable>&nbsp;\
  --property&nbsp;vmware_adaptertype="lsiLogic" --property vmware_disktype="preallocated" \
  --property hypervisor_type=vmware</screen>
      </listitem>
     </itemizedlist>
     <para> For more information about the <systemitem>architecture</systemitem>,
       <systemitem>hypervisor_type</systemitem>, and <systemitem>vm_mode</systemitem> properties,
      refer to <ulink
       url="http://docs.openstack.org/grizzly/openstack-compute/admin/content/image-metadata.html"
      />. </para>
    </step>
    <step>
     <para> To list all of the image's metadata, use: </para>
     <screen>glance image-show <replaceable>IMAGE_ID_OR_NAME</replaceable>&nbsp;</screen>
    </step>
    <step>
     <para>If you need to remove image properties, use the following command:</para>
     <screen>glance image-update <replaceable>IMAGE_ID_OR_NAME</replaceable> --purge-props</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.adm.cli.img.view">
   <title>Viewing Images and Image Properties, Deleting Images</title>
   <para>
    In the following, find some examples on how to view images or image
    properties or how to remove images from &ostack; &img;.
   </para>
   <variablelist>
    <varlistentry>
     <term>Listing Images</term>
     <listitem>
<screen>glance image-list</screen>
      <para>
       Lists ID, name, disk format, and container format for all images in
       &img; that the current user can access.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Showing Metadata for a Particular Image</term>
     <listitem>
<screen>glance image-show <replaceable>IMAGE_ID_OR_NAME</replaceable>&nbsp;</screen>
      <para>
       Shows metadata of the specified image.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Deleting an Image</term>
     <listitem>
<screen>glance image-delete <replaceable>IMAGE_ID_OR_NAME</replaceable>&nbsp;</screen>
      <para>
       Removes the specified image from &ostack; &img;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="sec.adm.cli.img.member">
   <title>Viewing and Modifying Membership of Private Images</title>
   <para>
    In the following, find some examples on how to view or modify membership
    of private images:
   </para>
   <variablelist>
    <varlistentry>
     <term>Listing Members a Private Image is Shared With</term>
     <listitem>
<screen>glance member-list --image-id <replaceable>IMAGE_ID</replaceable>&nbsp;</screen>
      <para>
       Lists the IDs of the projects whose members have access to the
       private image.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Listing Private Images Shared With a Member</term>
     <listitem>
<screen>glance member-list --tenant-id <replaceable>PROJECT_ID</replaceable>&nbsp;</screen>
      <para>
       Lists the IDs of private images that members of the specified project
       can access.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Granting Members Access to a Private Image</term>
     <listitem>
<screen>glance member-create [--can-share]&nbsp;<replaceable>IMAGE_ID_OR_NAME</replaceable>&nbsp;<replaceable>PROJECT_ID_OR_NAME</replaceable>&nbsp;</screen>
      <para>
       Grants the specified member access to the specified private image.
      </para>
      <para>
       By adding the <option>--can-share</option> option, you can allow the
       members to further share the image.
       <remark>taroth 2012-08-08: however 
       that may work, no idea...</remark>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Revoking Member Access to a Private Image</term>
     <listitem>
<screen>glance&nbsp;member-delete&nbsp;<replaceable>IMAGE_ID_OR_NAME</replaceable>&nbsp;<replaceable>PROJECT_ID_OR_NAME</replaceable>&nbsp;</screen>
      <para>
       Revokes the access of the specified member to the specified private
       image.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 id="sec.adm.cli.flavors">
  <title>Managing Flavors</title>

  &flavors;
  
  &flavor-params;
  
  &flavors-default;

  <para>
   Flavors can be managed with the <command>nova flavor-*</command>
   commands, provided by the <systemitem>python-novaclient</systemitem>
   package.
  </para>

  <para>
   Find examples for the key administration tasks below.
  </para>

  <variablelist>
   <varlistentry>
    <term>Listing Flavors</term>
    <listitem>
<screen>nova flavor-list</screen>
     <para>
      Lists all flavors with their ID and name, the amount of memory, the
      amount of disk space for the root partition and for the ephemeral
      partition, the swap, and the number of virtual CPUs.
     </para>
<!-- taroth 2012-08-10: did not mention RXTX factor as it is not used in
      our product-->
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Creating a Flavor</term>
    <listitem>
<screen>nova flavor-create <replaceable>FLAVOR_NAME</replaceable>&nbsp;<replaceable>FLAVOR_ID</replaceable>&nbsp;<replaceable>RAM_IN_MB</replaceable>&nbsp;<replaceable>ROOT_DISK_IN_GB</replaceable> \
  <replaceable>NUMBER_OF_VCPUS</replaceable>
     </screen>
     <para>
      When creating a flavor, you need to specify at least the parameters
      listed above. For optional parameters, refer to <command>nova help
      flavor-create</command>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Deleting a Flavor</term>
    <listitem>
<screen>nova flavor-delete <replaceable>FLAVOR_ID_OR_NAME</replaceable>&nbsp;</screen>
     <para>
      Deletes the specified flavor.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.adm.cli.quotas">
  <title>Setting Quotas</title>

  &quotas;
  
  &quota-params;

  <para>
   Quotas can be managed with the <command>nova quota-*</command> commands,
   provided by the <systemitem>python-novaclient</systemitem> package.
  </para>

  <para>
   Find examples for the key administration tasks below.
  </para>

  <variablelist>
   <varlistentry>
    <term>Showing Default Quota Values</term>
    <listitem>
     <screen>nova quota-defaults</screen>
     <para> Lists the default quotas which are defined in <filename>/etc/nova/nova.conf</filename>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Showing Quota Values for a Project</term>
    <listitem>
<screen>nova quota-show --tenant <replaceable>PROJECT_NAME</replaceable>&nbsp;</screen>
     <para>
      Lists the currently set quota values for a project.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Setting Quota Values for a Project</term>
    <listitem>
<screen>nova quota-update --instances 2 <replaceable>PROJECT_ID_OR_NAME</replaceable>&nbsp;</screen>
     <para>
      Sets the quota value for the <literal>instances</literal> parameter to
      <literal>2</literal> for the specified project. For a list of further
      options, refer to <command>nova help quota-update</command>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.adm.cli.networks">
  <title>Managing Networks</title>
  <para>Networks can now be managed with the <command>neutron</command> commands, provided by the
   <systemitem>python-quantumclient</systemitem> package. Alternatively, you can still use the
   known <command>nova</command> commands, provided by the
   <systemitem>python-novaclient</systemitem> package. </para>
  <sect2 id="sec.adm.cli.networks.netw.sub">
   <title>Creating or Modifying Networks and Subnets</title>
   &network-def;
   
   &subnet-intro;
   
   <para>&network-role-dependency;</para>
   
   <para>The following example commands focus on tasks that are specific to cloud administrators.
    For other commands related to networks and subnets, refer to <xref
     linkend="sec.user.cli.networks.netw.sub"/>.</para>
   
   <variablelist>
    <varlistentry>
     <term>Listing the System Extensions</term>
     <listitem><screen> neutron ext-list -c alias -c name</screen></listitem>
    </varlistentry>
     <varlistentry>
     <term>Creating A Shared Network</term>
     <listitem>
      <screen>neutron net-create &nbsp;<replaceable>NETW_NAME</replaceable> --shared public-net</screen>
      <para>Creates a shared network that is accessible to all projects.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Creating An External Network</term>
     <listitem>
      <screen>neutron net-create&nbsp;<replaceable>NETW_NAME</replaceable>&nbsp;--router:external True </screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Listing Networks Belonging To a Project</term>
     <listitem>
      <screen>neutron net-list</screen>
      <para>or</para>
      <screen>neutron net-external-list</screen>
      <para>Lists the networks (or external networks, respectively) that belong to a project.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Deleting a Network</term>
     <listitem>
      <screen>neutron net-delete&nbsp;<replaceable>NETW_NAME_OR_ID</replaceable></screen>
      &note-network-delete; </listitem>
    </varlistentry>
    <varlistentry>
     <term>Creating a Pool of Floating IP Addresses</term>
     <listitem>
      <screen>neutron&nbsp;subnet-create&nbsp;--allocation-pool&nbsp;start=<replaceable>IP_RANGE_START</replaceable>,end=<replaceable>IP_RANGE_END</replaceable>\
       --gateway&nbsp;<replaceable>GATEWAY_IP</replaceable>&nbsp;--disable-dhcp&nbsp;<replaceable>EXT_NETW_NAME_OR_ID</replaceable>&nbsp;<replaceable>NETW_IN_CIDR_NOTATION</replaceable>&nbsp;</screen>
      <para>After having created an external network, use the command above to create a pool of
       floating IP addresses. Replace the following placeholders with the appropriate values for
       your environment:</para>
      <itemizedlist>
       <listitem>
        <para>
         <replaceable>IP_RANGE_START</replaceable>: starting point for the range of IP addresses
         within the new subnet that floating IP addresses will be allocated from</para>
       </listitem>
       <listitem>
        <para><replaceable>IP_RANGE_END</replaceable>: end point for the range of IP addresses
         within the new subnet that floating IP addresses will be allocated from</para>
       </listitem>
       <listitem>
        <para><replaceable>GATEWAY_IP</replaceable>: IP address that is to be used as gateway for
         the new subnet</para>
       </listitem>
       <listitem>
        <para><replaceable>EXT_NETW_NAME_OR_ID</replaceable>: ID or name of the external network
         that the subnet is to be associated with</para>
       </listitem>
       <listitem>
        <para><replaceable>NETW_IN_CIDR_NOTATION</replaceable>: CIDR representation of the block of
         IP addresses the subnet represents</para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 id="sec.adm.cli.networks.ports.routers">
   <title>Creating or Modifying Ports and Routers</title>
   &port-dash-automatics;
   
   &port-intro;
   
   <para>The following example commands focus on tasks that are specific to cloud administrators.
    For other commands related to ports and routers, refer to <xref
     linkend="sec.user.cli.networks.ports.routers"/>.</para>
   <variablelist>
    <varlistentry>
     <term>Creating A Port</term>
     <listitem>
      <screen>neutron port-create&nbsp;<replaceable>NETW_NAME</replaceable></screen>
      <para>Creates a port for the current project and adds it to the specified network. By default,
       the port will be allocated an available fixed IP address out of one of the designated subnets
       for each IP version. To specify a certain IP address instead, use the
        <option>--fixed-ip</option> option as described in the example below.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term> Creating a Port with Specified IP Address
     </term>
     <listitem>
      <screen> neutron port-create netw1 --fixed-ip ip_address=192.168.2.40</screen>
      <para>Creates a port for <literal>netw1</literal> with the specified IP address
        <literal>192.168.2.40</literal>.</para>
     </listitem>
    </varlistentry>
   </variablelist>
   
   &router-intro;    
   
   <para>For an overview of commands related to routers, refer to <xref
     linkend="sec.user.cli.networks.ports.routers"/>.</para>
   
   &network-ostack-guide;  
 </sect2>
 </sect1>
 
 
</chapter>
