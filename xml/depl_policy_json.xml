<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<appendix xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
 xml:id="app.deploy.policy_json">
 <title>Configuring Role Based Access Control (RBAC)</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:maintainer>taroth</dm:maintainer>
   <dm:status>editing</dm:status>
   <dm:deadline/>
   <dm:priority/>
   <dm:translation>no</dm:translation>
   <dm:languages/>
  </dm:docmanager>
 </info>

 <para>To limit users' access rights or to define more fine-grained access
  rights, you can use Role Based Access Control (RBAC) (only available with
  Keystone v3).<remark>taroth 2016-02-11: info by aplanas: For cloud 6 we will
   have keystone v3 API, but for cloud 5 we still have v2.0, so there is a new
   parameter in the nova_dashboard barclamp that is `use_keystone_v3` that the
   user needs to set to `True` </remark> In the example below, we will create a
  new role (<literal>ProjectAdmin</literal>) that allows users with this role to
  add and remove other users to the <literal>Member</literal> role on the same
  project.</para>
 <para>To create a new role that can be assigned to a user-project pair, the
  following basic steps are needed:</para>
 <procedure>
  <step>
   <para>Create a custom <filename>policy.json</filename> file for the
    &o_ident; service. On the node where the <filename>keystone-server</filename> role is
    deployed, copy the file to
    <filename>/etc/keystone/<replaceable>CUSTOM_</replaceable>policy.json</filename>.
    For details, see <xref linkend="sec.deploy.policy_json.edit"/>.
   </para>
  </step>
  <step>
   <para>Create a custom <filename>keystone_policy.json</filename> file for the
    &o_dash; service. <remark>taroth 2016-02-11: can that be the same file
     as CUSTOM_policy.json? TODO: check in trello/bugzilla</remark> On the node
    where the <literal>nova_dashboard-server</literal> role is deployed, copy
    the custom <filename>keystone_policy.json</filename> file to FIXME. For
    details, see <xref linkend="sec.deploy.keystone_policy_json.edit"/>.</para>
  </step>
  <step>
   <para>Make the &o_ident; service aware of the
      <filename><replaceable>CUSTOM_</replaceable>policy.json</filename> file by
    editing and reapplying the <guimenu>Keystone</guimenu> &barcl;. For details,
    see <xref linkend="sec.deploy.policy_json.keystone"/>.</para>
  </step>
  <step>
   <para>Make the &o_dash; service aware of the
     <filename>keystone_policy.json</filename> file by editing and reapplying
    the <guimenu>Horizon</guimenu> &barcl;. For details, see
    <xref linkend="sec.deploy.policy_json.horizon"/>.</para>
  </step>
 </procedure>


 <!--copied from https://bugzilla.suse.com/show_bug.cgi?id=926253: 
  The following steps are needed to create this "ProjectAdmin" role: 
  1) in the barclamp-keystone raw view, there's a new parameter which can point to a
  custom policy file. the parameter is called "policy_file". Be careful and
  don't use "policy.json" because that's the default and changes there will be
  overwritten with a package update. 
  
  2) provide a policy file with the name
  mentioned in "policy_file" in /etc/keystone . Attached is an example with a
  "ProjectAdmin" role defined 
  
  3) Now create a user and a project for which the
  new user is "ProjectAdmin":-->
 <!--<screen> 
  keystone tenant-create -/-name project1
  keystone user-create -/-name user1 -/-tenant project1 -/-pass secret -/-enabled true
  keystone role-create -/-name ProjectAdmin
  keystone user-role-add -/-user user1 -/-role ProjectAdmin -/-tenant project1</screen>-->

 <!-- Now "user1" can assign the "Member" role to other users (i.e. user2):
  
  openstack -/-os-identity-api 3 role add -/-user user2 -/-project project1 Member
  
  
  "user2" should now be able to i.e. list instances with "nova list" in the poject "project1" -->


 <sect1 xml:id="sec.deploy.policy_json.edit">
  <title>Editing <filename>policy.json</filename></title>

  <para> The <filename>policy.json</filename> file is located in
    <filename>/etc/keystone/</filename> on the node where the
    <filename>keystone-server</filename> role is deployed. The template has the
   following general structure: </para>

  <screen>{
  <!-- "attributes" : {
      "mode" : "<replaceable>value</replaceable>",
      "start_up_delay" : <replaceable>value</replaceable>,
      "teaming" : { "mode": <replaceable>value</replaceable> },<co xml:id="1structure.general"/>
      "network" : {
         "interface_map"<co xml:id="1structure.interface_map"/> : [
            ...
         ],
         "conduit_map"<co xml:id="1structure.conduit"/> : [
            ...
         ],
         "networks"<co xml:id="1structure.networks"/> : {
            ...
         },
      }
   }
}--></screen>

  <!--<calloutlist>
   <callout arearefs="structure.general">
    <para>
     General attributes. Refer to
     <xref linkend="sec.deploy.network_json.global"/> for details.
    </para>
   </callout>
   <callout arearefs="structure.interface_map">
    <para>
     Interface map section. Defines the order in which the physical network
     interfaces are to be used. Refer to
     <xref linkend="sec.deploy.network_json.interface_map"/> for details.
    </para>
   </callout>
   <callout arearefs="structure.conduit">
    <para>
     Network conduit section defining the network modes and the network
     interface usage. Refer to
     <xref linkend="sec.deploy.network_json.conduits"/> for details.
    </para>
   </callout>
   <callout arearefs="structure.networks">
    <para>
     Network definition section. Refer to
     <xref linkend="sec.deploy.network_json.networks"/> for details.
    </para>
   </callout>
  </calloutlist>-->

  <note>
   <title>Order of Elements</title>
   <para><remark>taroth 2016-02-12: check if the following is true for
     policy.json</remark> The order in which the entries in the
     <filename>*.json</filename> file appear may differ from the one listed
    above. Use your editor's search function to find certain entries. </para>
  </note>

  <procedure>
   <step>
    <para>Copy <filename>/etc/keystone/policy.json</filename> and save it under
     a different name, for example
      <filename><replaceable>CUSTOM_</replaceable>policy.json</filename>.
    </para>
    <important>
     <para>If you use the same name as the original file, your custom file will
      be overwritten by the next package update.</para>
    </important>
   </step>
   <step>
    <para>To edit the file, open it in an editor of your choice. FIXME: add
     example of what to add or adjust</para>
   </step>
   <step>
    <para>Save the changes and copy the file to
       <filename>/etc/keystone/<replaceable>CUSTOM_</replaceable>policy.json</filename>
     on the node where the <filename>keystone-server</filename> role is deployed
     (usually a &contrnode; or a cluster if you use an &ha;
     setup).</para>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="sec.deploy.keystone_policy_json.edit">
  <title>Editing <filename>keystone_policy.json</filename></title>

  <para> The <filename>keystone_policy.json</filename> file is located in
    <filename>FIXME</filename> on the node where the
    <literal>nova_dashboard-server</literal> role is deployed. The template has
   the following general structure: </para>

  <screen>{
   <!-- "attributes" : {
    "mode" : "<replaceable>value</replaceable>",
    "start_up_delay" : <replaceable>value</replaceable>,
    "teaming" : { "mode": <replaceable>value</replaceable> },<co xml:id="1structure.general"/>
    "network" : {
    "interface_map"<co xml:id="1structure.interface_map"/> : [
    ...
    ],
    "conduit_map"<co xml:id="1structure.conduit"/> : [
    ...
    ],
    "networks"<co xml:id="1structure.networks"/> : {
    ...
    },
    }
    }
    }--></screen>



  <note>
   <title>Order of Elements</title>
   <para><remark>taroth 2016-02-12: todo - check if the following is true for
     keystone_policy.json?</remark> The order in which the entries in the
     <filename>*.json</filename> file appear may differ from the one listed
    above. Use your editor's search function to find certain entries. </para>
  </note>

  <procedure>
   <step>
    <para>Copy <filename>/FIXME/keystone_policy.json</filename> and save it
     under a different name, for example
       <filename><replaceable>CUSTOM_</replaceable>keystone_policy.json</filename>. </para>
    <important>
     <para>If you use the same name as the original file, your custom file will
      be overwritten by the next package update.</para>
    </important>
   </step>
   <step>
    <para>To edit the file, open it in an editor of your choice. FIXME: add
     example of what to add or adjust</para>
   </step>
   <step>
    <para>Save the changes and copy the file to
       <filename>/FIXME/<replaceable>CUSTOM_</replaceable>keystone_policy.json</filename>
     on the node where the <literal>nova_dashboard-server</literal> role is
     deployed.</para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.deploy.policy_json.keystone">
  <title>Adjusting the <guimenu>&o_ident;</guimenu> &Barcl;
   Proposal</title>
  <procedure>
   <step>
    <para>Log in to the &crow; &wi;.</para>
   </step>
   <step>
    <para>Select <menuchoice>
      <guimenu>&Barcl;s</guimenu>
      <guimenu>All &barcl;s</guimenu>
     </menuchoice>.</para>
   </step>
   <step>
    <para>Go to the <guimenu>&o_ident;</guimenu> &barcl; and click
      <guimenu>Edit</guimenu>.</para>
   </step>
   <step>
    <para>In the <guimenu>Attributes</guimenu> section, click
     <guimenu>Raw</guimenu>. This shows the complete configuration file
     and allows you to edit it directly.</para>
   </step>
   <step>
    <para>Adjust the <literal>policy_file</literal> parameter to point to the
       <filename><replaceable>CUSTOM_</replaceable>policy.json</filename> file.
     For example:</para>
    <screen>{
  [...]
  "policy_file": "mypolicy.json",</screen>
   </step>
   <step>
    <para>
     <guimenu>Save</guimenu> and <guimenu>Apply</guimenu> the changes to the
     &o_ident; &barcl;.</para>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="sec.deploy.policy_json.horizon">
  <title>Adjusting the <guimenu>&o_dash;</guimenu> &Barcl;
   Proposal</title>
  <procedure>
   <step>
    <para>Log in to the &crow; &wi;.</para>
   </step>
   <step>
    <para>Select <menuchoice>
      <guimenu>&Barcl;s</guimenu>
      <guimenu>All &barcl;s</guimenu>
     </menuchoice>.</para>
   </step>
   <step>
    <para>Go to the <guimenu>&o_dash;</guimenu> &barcl; and click
      <guimenu>Edit</guimenu>.</para>
   </step>
   <step>
    <para>In the <guimenu>Attributes</guimenu> section, click
      <guimenu>Raw</guimenu>. This shows the complete configuration file
     and allows you to edit it directly.</para>
   </step>
   <step>
    <para>If needed, adjust the <literal>policy_file_path</literal> parameter to
     point to the directory where you copied the newly added
       <filename><replaceable>CUSTOM_</replaceable>keystone_policy.json</filename>
     file. By default, its value is an empty string&mdash;this means that
     the default directory will be used. <remark> taroth 2016-02-12: @aplanas:
      which is the default directory? unfortunately ('conf' ROOT_PATH of the
      django project) does not mean anything to me...</remark>
    </para>
   </step>
   <step>
    <para>Enter the new file's name as value of the <literal>identity</literal>
     parameter within the <literal>policy_file</literal> section (<xref
     linkend="co.horizon.barcl.policy"/>):</para>
    <screen>{
  "policy_file_path": "",
  "policy_file": {
    "identity": "mykeystone_policy.json", <co xml:id="co.horizon.barcl.policy"/>
    "compute": "nova_policy.json",
    "volume": "cinder_policy.json",
    "image": "glance_policy.json",
    "orchestration": "heat_policy.json",
    "network": "neutron_policy.json",
    "telemetry": "ceilometer_policy.json"</screen>
    <!--copied from https://bugzilla.suse.com/show_bug.cgi?id=931856:
     By default is the empty string and this means that the default
     directory will be used ('conf' ROOT_PATH of the django project) - Inside the
     'polivy_file' hash we can find 'identity', 'compute', 'volume', 'image',
     'orchestration' and 'network' fields. These contains the file names of the
     policy files that Horizon use to adapt the UI. Control the visual rules of
     actions, but the real action-enabled is the one that is stored in
     Keystone-->
   </step>
   <step>
    <para>
     <guimenu>Save</guimenu> and <guimenu>Apply</guimenu> the changes to the
     &o_dash; &barcl;.</para>
   </step>
  </procedure>
 </sect1>
</appendix>
