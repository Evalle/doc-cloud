<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<appendix xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
 xml:id="app.deploy.policy_json">
 <title>Configuring Role Based Access Control (RBAC)</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:maintainer>taroth</dm:maintainer>
   <dm:status>editing</dm:status>
   <dm:deadline/>
   <dm:priority/>
   <dm:translation>no</dm:translation>
   <dm:languages/>
  </dm:docmanager>
 </info>

 <para>To limit users' access rights or to define more fine-grained access
  rights, you can use Role Based Access Control (RBAC) (only available with
  Keystone v3).<remark>taroth 2016-02-11: info by aplanas: For cloud 6 we will
   have keystone v3 API, but for cloud 5 we still have v2.0, so there is a new
   parameter in the nova_dashboard barclamp that is `use_keystone_v3` that the
   user needs to set to `True` </remark> In the example below, we will create a
  new role (<literal>ProjectAdmin</literal> that allows users with this role to
  add and remove other users to the <literal>Member</literal> role on the same
  project.</para>
 <procedure>
  <para>To create a new role, proceed as follows:</para>
  <step>
   <para>Create a custom <filename>policy.json</filename> file as described in
    FIXME.</para>
  </step>
  <step>
   <para>Save it under a different name, for example
      <filename><replaceable>CUSTOM_</replaceable>policy.json</filename>,
    otherwise it will be overwritten by the next package update.</para>
  </step>
  <step>
   <para>Copy your custom <filename>policy.json</filename> file to the node
    where the <filename>keystone-server</filename> role is deployed (usually a
    &contrnode; or a cluster if you use an &ha; setup) and place the
    file in <filename>/etc/keystone</filename>.</para>
  </step>
  <step>
   <para>To make &o_ident; aware of the new file, adjust the
     <literal>policy-file</literal> parameter in the &o_ident; &barcl;
    to point to the
     <filename><replaceable>CUSTOM_</replaceable>policy.json</filename>. For
    details, see FIXME.</para>
  </step>
  <step>
   <para>Reapply the &o_ident; &barcl;.</para>
  </step>
  <step>
   <para>Copy <filename>keystone_policy.json</filename> to the node where the
    <literal>nova_dashboard-server</literal> role is deployed.
    <remark>taroth 2016-02-11: can that be the same file as
       CUSTOM_policy.json? TODO:
     check in trello/bugzilla</remark>
   </para>
  </step>
  <step>
   <para>To make &o_dash; aware of the new file, adjust the
     <literal>policy-file-path</literal> parameter in the &o_dash;
    &barcl; to point to the newly added file.</para>
  </step>
  <step>
   <para><!--FIXME: copied from https://bugzilla.suse.com/show_bug.cgi?id=931856:
    By default is the empty string and this means that the default
    directory will be used ('conf' ROOT_PATH of the django project) - Inside the
    'polivy_file' hash we can find 'identity', 'compute', 'volume', 'image',
    'orchestration' and 'network' fields. These contains the file names of the
    policy files that Horizon use to adapt the UI. Control the visual rules of
    actions, but the real action-enabled is the one that is stored in
    Keystone--></para></step>
  <step>
   <para><!--FIXME: In the same way that we did in keystone, if we use different name, we
   need to set the name in the 'identity' field in the Horizon barclamp--></para></step>
  <step>
   <para>Reapply the &o_dash; &barcl;.</para>
  </step>
   
 </procedure>


 <!--copied from https://bugzilla.suse.com/show_bug.cgi?id=926253: 
  The following steps are needed to create this "ProjectAdmin" role: 
  1) in the barclamp-keystone raw view, there's a new parameter which can point to a
  custom policy file. the parameter is called "policy_file". Be careful and
  don't use "policy.json" because that's the default and changes there will be
  overwritten with a package update. 
  
  2) provide a policy file with the name
  mentioned in "policy_file" in /etc/keystone . Attached is an example with a
  "ProjectAdmin" role defined 
  
  3) Now create a user and a project for which the
  new user is "ProjectAdmin":-->
 <!--<screen> 
  keystone tenant-create -/-name project1
  keystone user-create -/-name user1 -/-tenant project1 -/-pass secret -/-enabled true
  keystone role-create -/-name ProjectAdmin
  keystone user-role-add -/-user user1 -/-role ProjectAdmin -/-tenant project1</screen>-->

 <!-- Now "user1" can assign the "Member" role to other users (i.e. user2):
  
  openstack -/-os-identity-api 3 role add -/-user user2 -/-project project1 Member
  
  
  "user2" should now be able to i.e. list instances with "nova list" in the poject "project1" -->


 <sect1 xml:id="sec.deploy.policy_json.edit">
  <title>Editing <filename>policy.json</filename></title>
  
  <para>FIXME</para>
  <!--<para>
   The <filename>network.json</filename> is located in
   <filename>/etc/crowbar/</filename>. To edit it, open it in an editor of
   your choice. The template has the following general structure:
  </para>

<screen>{
   "attributes" : {
      "mode" : "<replaceable>value</replaceable>",
      "start_up_delay" : <replaceable>value</replaceable>,
      "teaming" : { "mode": <replaceable>value</replaceable> },<co xml:id="1structure.general"/>
      "network" : {
         "interface_map"<co xml:id="1structure.interface_map"/> : [
            ...
         ],
         "conduit_map"<co xml:id="1structure.conduit"/> : [
            ...
         ],
         "networks"<co xml:id="1structure.networks"/> : {
            ...
         },
      }
   }
}</screen>

  <calloutlist>
   <callout arearefs="structure.general">
    <para>
     General attributes. Refer to
     <xref linkend="sec.deploy.network_json.global"/> for details.
    </para>
   </callout>
   <callout arearefs="structure.interface_map">
    <para>
     Interface map section. Defines the order in which the physical network
     interfaces are to be used. Refer to
     <xref linkend="sec.deploy.network_json.interface_map"/> for details.
    </para>
   </callout>
   <callout arearefs="structure.conduit">
    <para>
     Network conduit section defining the network modes and the network
     interface usage. Refer to
     <xref linkend="sec.deploy.network_json.conduits"/> for details.
    </para>
   </callout>
   <callout arearefs="structure.networks">
    <para>
     Network definition section. Refer to
     <xref linkend="sec.deploy.network_json.networks"/> for details.
    </para>
   </callout>
  </calloutlist>

  <note>
   <title>Order of Elements</title>
   <para>
    The order in which the entries in the <filename>network.json</filename>
    file appear may differ from the one listed above. Use your editor's
    search function to find certain entries.
   </para>
  </note>-->
 </sect1>
</appendix>
