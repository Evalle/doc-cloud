<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-daps:xslt:profiling:novdoc-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "IGNORE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.user.basics">
 <title>Conceptual Overview</title>
 <abstract>
  <para>In this chapter, we will introduce basic concepts that you should know 
  for a deeper understanding of the requirements and relationship between
  individual tasks to be executed by administrators or users.
  In the following chapters, you learn how to execute the key tasks either with
  the &cloud; Web interface or with the command line tools. </para>
 </abstract>

 <sect1 id="sec.basics.roles">
  <title>User Roles</title>
  <para>In &productname;, there are several high-level user roles (or viewpoints)
  that we need to discriminate:</para>
  <variablelist>
   <varlistentry>
    <term>&cloud; Operator</term>
    <listitem>
     <para>Installs and deploys &productname;. For detailed information about the
      operator's tasks and how to solve them, refer to &cloud; &clouddeploy;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&cloud; Administrator</term>
    <listitem>
     <para>Manages projects, users, images, flavors, and quotas within &productname;.
     For detailed information about the administrator's tasks and how to solve 
     them, refer to &cloud; &cloudadmin;.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&cloud; User</term>
    <listitem>
     <para>End-user who launches and manages instances, can create snapshots, and
     use volumes for persistent storage within &productname;. For detailed 
     information about the user's tasks and how to solve them, refer to 
     &cloud; &clouduser;.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 id="sec.basics.projects">
  <title>Projects</title>
  <para>
   &productname; allows administrators to manage projects independently from each
   other. Projects represent different organizational units in the cloud to which
   users can be assigned. During the basic system setup, the cloud operator needs
   to minimally define one project, one user, and one role to link the project 
   and user. Roles define which actions users are allowed to perform.
  </para>
  <para>
    Administrators can create, delete or temporarily disable projects. Disabling
    a project has the following consequences:
   </para>
  <itemizedlist id="il.disabled.projects">
   <title>Consequences of Disabling a Project</title>
   <listitem>
    <para>
      The project can no longer be accessed from the <guimenu>Project</guimenu> 
      drop-down list on the <guimenu>Project</guimenu> tab.
     </para>
   </listitem>
   <listitem>
    <para>
      Users that are only members of the disabled project can no longer log
      in.
     </para>
   </listitem>
   <listitem>
    <para>
      It is impossible to launch new instances for a disabled project.
      Instances already running are not automatically terminated
      though&mdash;you have to stop them manually.
     </para>
   </listitem>
   <listitem>
    <para>
      All data of a disabled project is kept so that the project can be
      re-enabled at any time.
     </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 id="sec.basics.users">
  <title>Users</title>
  <para>Users are part of one or multiple projects. When a new user account
   is created by a cloud administrator, the user has to be assigned to a 
   primary project. Before a user account can be deleted, the user needs to be 
   removed from his primary project. The user can also be assigned to 
   additional projects.<!--FIXME: add link(s): as described in 
    <xref linkend="pro.adm.dash.user.assign"/>--></para>
  <para>User accounts can be created, deleted or temporarily deactivated by 
   &cloud; administrators. If a user account is deactivated, the user can no 
   longer log in, but his data is kept so that the account can be re-enabled at 
   any time.
  </para>
 </sect1>
  <!--taroth 2012-09-19: todo - find out more and add the folowing section for 
  the future:
  <sect1>
   <title>Roles and Actions</title>
  </sect1>-->


 <sect1 id="sec.basics.quotas">
  <title>Quotas</title>
  <para>To prevent system capacities from being exhausted without notification,
   cloud administrators can set up quotas. In &ostack;, quotas are currently 
   defined per project. Quotas contain the following parameters:
  </para>

  <variablelist id="vl.quota.params">
   <title>Quota Parameters</title>
   <varlistentry>
    <term>ID (Name)</term>
    <listitem>
     <para>
      ID for the quota settings. Automatically proposed by &productname;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Metadata Items</term>
    <listitem>
     <para>
      Number of metadata items per instance. The metadata is written to the
      <filename>meta.js</filename> file at the root (<filename>/</filename>)
      directory.
      <remark>taroth 2012-08-06: according to rhafer, public SSH keys 
      are an example of metadata, but according to mvidner, SSH keys belong to 
      the injected files (see below)</remark>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Injected Files</term>
    <listitem>
     <para>
      Number of injected files.
      <remark>taroth 2012-07-26: DEVs, no idea
     what this should mean - does anybody have more information on this?
     taroth 2012-08-06: according to mvidner: SSH keys (similar to
     Studio's overlay files)</remark>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Injected File Content Bytes</term>
    <listitem>
     <para>
      Number of bytes per injected file.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>VCPUs</term>
    <listitem>
     <para>
      Number of virtual CPUs that can be allocated in total.
<!--taroth 2012-07-26: inconsistent terminology in Dashboard 
       - called "Cores" in the "Quota"  overview on the Admin tab, 
       see bnc#773852--></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Instances</term>
    <listitem>
     <para>
      Total number of instances.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Volumes</term>
    <listitem>
     <para>
      Total number of volumes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Gigabytes</term>
    <listitem>
     <para>
      Total size of all volumes, measured in gigabytes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>RAM (in MB)</term>
    <listitem>
     <para>
      Total RAM size of all instances, measured in megabytes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Floating IPs</term>
    <listitem>
     <para>
      Total number of floating IP addresses.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Security Group Rules</term>
    <listitem>
     <para>
      <remark>taroth 2012-07-26: hm, this param is only shown on the Quota 
     overview on the Admin tab, but does not appear in the dialog where quotas 
     are *set*</remark>
      Number of security rules per security group.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Security Groups</term>
    <listitem>
     <para>
      <remark>taroth 2012-07-26: hm, this param is only shown on the Quota 
     overview on the Admin tab, but does not appear in the dialog where quotas 
     are *set*</remark>
      Number of security groups.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 id="sec.basics.imgs">
  <title>Images</title>
  <para>In &productname; context, images are virtual disk images that represent 
   the contents and structure of a storage medium or device, such as a hard drive, 
   in a single file or storage device.</para>
  <para>Images have both contents and meta-data (also called properties).
   The following properties can be attached to an image in &cloud;:</para>
  <variablelist id="vl.img.props">
   <title>Image Properties</title>
   <varlistentry>
    <term>Name</term>
    <listitem>
     <para>
      The image's name.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Kernel ID</term>
    <listitem>
     <para>
      The image's kernel ID. This parameter is only needed if an external
      Kernel is associated with the image. The ID points to the Kernel
      glance image.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Ramdisk ID</term>
    <listitem>
     <para>
      The image's ramdisk ID. This parameter is only needed if an external
      ramdisk is associated with the image. The ID points to the ramdisk
      glance image.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Architecture</term>
    <listitem>
     <para>
      The image's architecture.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Container Format</term>
    <listitem>
     <para>
      The image's container format. For details, refer to
      <ulink url="http://docs.openstack.org/developer/glance/formats.html"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Disk Format</term>
    <listitem>
     <para>
      The image's disk format. Example formats include
      <literal>raw</literal>, <literal>qcow2</literal>, and
      <literal>ami</literal>. For details, refer to
      <ulink url="http://docs.openstack.org/developer/glance/formats.html"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Public</term>
    <listitem>
     <para>
      The check box defines if the image is publicly available or not.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>Which users are allowed to manage images is defined by the cloud operator 
   during setup of &productname;. Image upload and management may be restricted 
   to cloud administrators only. Whereas nearly all key tasks can either be 
   executed from the &cloud; Web interface or from the command line, images can 
   only be uploaded with a command line tool, 
   <command>glance image-create</command>. For details, refer to 
   <xref linkend="sec.adm.cli.img.upload"/>. </para>
 </sect1>

 <sect1 id="sec.basics.instances">
  <title>Instances</title>
  <para>Instances are virtual machines that run inside the cloud. To start
  an instance, you must have a virtual machine image that contains the following 
  information: which operating system to use, a user name and password with which 
  to log in to the &vmguest;, file storage etc. The cloud contains a pool of such
  images that have been uploaded to Glance and are accessible to members of 
  different projects. </para>

  <para>Upon start of an instance, you need to specify the following 
   key parameters:</para>
  <itemizedlist>
   <listitem>
    <para>The <quote>size</quote> (<literal>flavor</literal>) of the virtual 
    machine.</para>
   </listitem>
   <listitem>
    <para>A keypair for SSH access of the instance. <!--For details, refer to 
    <xref linkend="sec.user.dash.inst.access.keys"/>.--> In case an image uses a 
    static &rootuser; password or a static key set (neither is recommended), you 
    do not need to provide a keypair on start of the instance.</para>
   </listitem>
   <listitem>
    <para>A security group that the instance should belong to. Security groups 
    are a kind of cloud firewall that define which incoming network traffic should
    be forwarded to instances. <!--For details, refer to 
    <xref linkend="sec.user.dash.inst.access.security"/>.--></para>
   </listitem>
  </itemizedlist>
  <para>If needed, block storage devices (<literal>volumes</literal>) can be
  attached to running instances for persistent storage. <!--Refer to 
  <xref linkend="sec.user.dash.volumes"/> for details.-->
  </para>

  <sect2 id="sec.basics.flavors">
   <title>Flavors</title>
   <para>
   In &ostack;, flavors define the compute, memory and storage capacity of
   <literal>nova</literal> computing instances. To put it simple, a flavor
   is an available hardware configuration for a server. It defines the
   <quote>size</quote> of a virtual server that can be launched. There are
   some default flavors (<literal>m1.*</literal>), which are created during
   initialization of the Nova database, triggered by Crowbar.
  </para>

   <para>
   A flavor consists of the following parameters:
  </para>

   <variablelist id="vl.flavor.params">
    <title>Flavor Parameters</title>
    <varlistentry>
     <term>Flavor ID</term>
     <listitem>
      <para>
      Automatically proposed by &productname;.
      <remark>taroth 2012-07-25: 
     todo - check if proposal can be changed and what happens if I use an already 
     existing ID</remark>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Name</term>
     <listitem>
      <para>
      Name for the new flavor.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>VCPUs</term>
     <listitem>
      <para>
      Number of virtual CPUs to use.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Memory MB</term>
     <listitem>
      <para>
      Amount of RAM to use (in megabytes).
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Root Disk GB</term>
     <listitem>
      <para>
      Amount of disk space (in gigabytes) to use for the root
      (<literal>/</literal>) partition.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Ephemeral Disk GB</term>
     <listitem>
      <para>
      Amount of disk space (in gigabytes) to use for the ephemeral
      partition. If unspecified, the value is <literal>0</literal> by
      default.
     </para>
      <para>
      Ephemeral disks offer machine local disk storage linked to the
      lifecycle of a VM instance. When a VM is terminated, all data on the
      ephemeral disk is lost. Ephemeral disks are not included in any
      snapshots.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Swap</term>
     <listitem>
      <para>
       <remark>taroth 2012-08-10: only visible on CLI (nova create-flavor --swap)</remark>
      Amount of swap space (in megabytes) to use. If unspecified, the value
      is <literal>0</literal> by default.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>RXTX Factor</term>
     <listitem>
      <para>
       <remark>taroth 2012-08-10: not sure if to mention this param at all -
			only visible on CLI (nova create-flavor --rxtx-factor, default: 1), 
			DEVs: what does it mean/specify?</remark>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>The default flavors are: <remark>taroth 2012-09-18: todo -
  where are they defined in the system?</remark>
   </para>

   <itemizedlist id="il.flavors.default">
    <title>Default Flavors</title>
    <listitem>
     <para>m1.tiny (1 VCPU/0 GB Disk/512 MB RAM)</para>
    </listitem>
    <listitem>
     <para>m1.smaller (1 VCPU/0 GB Disk/1024 MB RAM)</para>
    </listitem>
    <listitem>
     <para>m1.small (1 VCPU/10 GB Disk/2048 MB RAM)</para>
    </listitem>
    <listitem>
     <para>m1.medium (2 VCPU/10 GB Disk/3072 MB RAM)</para>
    </listitem>
    <listitem>
     <para>m1.large (4 VCPU/10 GB Disk/8192 MB RAM)</para>
    </listitem>
    <listitem>
     <para>m1.xlarge (8 VCPU/10 GB Disk/8192 MB RAM)</para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 id="sec.basics.keys">
   <title>Keypairs</title>
   <para>For SSH access to an instance, you usually need to provide a keypair at
   launch time and to adjust the security rules. The default security
   rules block access to SSH ports and prevent pinging an instance. 
   To make the instance also accessible from outside the cloud, assign
   a floating (public) IP address.</para>

   <para>Keypairs are SSH credentials that are injected into images when they are
    launched. Create at least one keypair per project. If you already generated
    a keypair with an external tool, you can import it into &ostack;. The keypair
    can be used for multiple instances belonging to that project.</para>

  </sect2>

  <sect2 id="sec.basisc.security">
   <title>Security Groups and Rules</title>
   <para>In &productname;, security groups are used to define which incoming 
    network traffic should be forwarded to instances. Security groups hold a set 
    of firewall policies (security group rules).</para>
   <!--<sect3 id="sec.user.dash.inst.access.security.groups">
    <title>Security Groups</title>
-->
   <para> When launching an instance, you need to define which security groups 
    it should belong to. A default security group is available for each project. 
    It allows all network traffic from other members of this group and discards 
    traffic from other IP addresses and groups.</para>

   <para>Multiple security groups for a project can be defined, with each group 
    holding a different set of firewall policies. This is useful if you
    have groups of instances that should differ in firewall configuration (for example,
    front-end and back-end servers). An instance can be assigned to multiple 
    security groups.</para>
   <!-- <sect3 id="sec.user.dash.inst.access.security.rules">
    <title>Security Group Rules</title>
   -->
   <para>You can adjust rules of the default security group as well as rules of
    any other security group that has been created. As soon as the rules for a 
    group are modified, the new rules are automatically applied to all running 
    instances belonging to that security group.</para>
   <para>Adjust the rules in a security group to allow access to instances via 
    different ports and protocols. This is necessary to be able to access instances
    via SSH, to ping them or to allow UDP traffic (for example, for an DNS server
    running on an instance).</para>
   <para>Rules in security groups are specified by the following parameters:</para>
   <variablelist>
    <varlistentry>
     <term>Source of traffic</term>
     <listitem>
      <para>Decide if to allow traffic to instances only from IP addresses 
       inside the cloud (from other group members) or from <emphasis>all</emphasis>
       IP addresses. <!-- IP subnet in CIDR notation)-->
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Protocol </term>
     <listitem>
      <para>Choose between TCP (for SSH), ICMP (for pings), or UDP.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Destination Port on Virtual Machine</term>
     <listitem>
      <para>Define a port range. To open a single port only, enter the same value
       twice. ICMP does not support ports. In that case, enter values which define 
       the codes and types of ICMP traffic that should be allowed.</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>If no further security groups have been created, any instances are 
     automatically assigned to the default security group (if not specified
     otherwise). Unless you change the rules for the default group, those instances
     cannot be accessed from any IP addresses outside the cloud.
     <!--taroth 2012-08-27: IIRC, I read this in upstream docs, but according to
     bmwiedemann's tests, he could not access arbitrary ports of VMs in the same
     security group, therefore commenting--> 
     <!--Unless you change the rules for the default group, this means that
     those instances are only accessible from IP addresses belonging to other members 
     of this group.--></para>
   
   <!--taroth 2012-08-15: mention when non-default sec groups are useful (info
    by mvidner, for CLI chapter mention how to change security groups for running 
    instances, info by cthiel: 
    sure, this is possible, but AFAIK only through the command-line:
    
    usage: nova add-secgroup <server> <secgroup>
    Add a Security Group to a server.
    
    Positional arguments:
    <server>    Name or ID of server.
    <secgroup>  Name of Security Group.
    
    
    usage: nova remove-secgroup <server> <secgroup>
    
    Remove a Security Group from a server.
    
    Positional arguments:
    <server>    Name or ID of server.
    <secgroup>  Name of Security Group.
   -->
  </sect2>
  <sect2 id="sec.basics.ip">
   <title>IP Addresses for Instances</title>
    <para>Each instance can have two IP addresses: a private and a public one. 
    Private IP addresses are used for communication between instances, public
    ones for communication with the outside world. When an instance is launched,
    it is automatically assigned a private IP address which stays the same
    until the instance is explicitly terminated. (Rebooting the instance does not
    have an effect on the private IP address).
  </para>
  <para>A pool of floating IPs is available in &ostack; Nova, as configured by 
  by the cloud operator. You can allocate a certain number of those to a
  project&mdash;the maximum number of floating IP addresses per project is defined
  by the quota. From this set, you can then add a floating IP address to an 
  instance of the project. Floating IP addresses can be dynamically disassociated 
  and associated with other instances of the same project at any time.  
  </para>
   <!--<procedure>
    <title>Allocating Floating (Public) IPs to a Project</title>-->
  <para>Before you can assign a floating IP address to an instance, you first 
     need to allocate floating IPs to a project.</para>
    
   <!--<procedure>
    <title>Assigning Floating (Public) IP Addresses to Instances</title>
   -->
  <para>After floating IP addresses have been allocated to
     the current project, you can assign them to running instances. One floating 
     IP address can be assigned to one instance at a time.</para>
   
  </sect2>
 </sect1>

 <sect1 id="sec.user.basics.inst.launch">
  <title>Launching Instances</title>
  <para>Instances are virtual machines that run inside the cloud. To start
  an instance, you must have a virtual machine image that contains the following 
  information: which operating system to use, a user name and password with which 
  to log in to the &vmguest;, file storage etc. The cloud contains
  a pool of such images that have been uploaded to Glance and are
  accessible to members of different projects. </para>


  <para>
   If you did not provide a keypair on start and did not touch security groups
   or rules so far, by default the instance can only be accessed from inside the 
   cloud via VNC at this point. Even pinging the instance is not possible. <!--To 
   change this, proceed with <xref linkend="sec.user.dash.inst.access"/>.--></para>
 </sect1>

 <sect1 id="sec.user.basics.inst.access">
  <title>Configuring Access to the Instances</title>
    
 <!-- <sect2 id="sec.user.dash.inst.access.security">
   <title>Configuring Security Groups and Rules</title>-->
  
   
  
   
 <!--<sect1 id="sec.user.dash.inst.manage">
  <title>Managing Instances</title>
 -->
  <para>The following are typical tasks for managing instances:</para>
  <itemizedlist>
   <listitem>
    <para>Accessing instances from remote</para>
   </listitem>
   <listitem>
    <para>Viewing logs</para>
   </listitem>
   <listitem>
    <para>Creating instance snapshots to preserve a certain disk state of an
     instance</para>
   </listitem>
   <listitem>
    <para>Using instance snapshots as base for new images</para>
   </listitem>
   <listitem>
    <para>Rebooting or terminating instances</para>
   </listitem>
   <listitem>
    <para>Pausing or suspending instances</para>
   </listitem>
   <listitem>
    <para>Tracking instance usage</para>
   </listitem>
  </itemizedlist>



  <para>
   To access an instance via SSH, the following requirements need to be 
    fulfilled:</para>
  <itemizedlist>
   <listitem>
    <para>
     <systemitem class="daemon">sshd</systemitem> must be running
      inside the virtual machine.</para>
   </listitem>
   <listitem>
    <para>Port <literal>22</literal> must be open in the virtual machine's
     firewall.</para>
   </listitem>
   <listitem>
    <para>The security group which the instance is assigned to, must be configured
    to allow SSH access. <!--For details, refer to 
    <xref linkend="sec.user.dash.inst.access.security"/>.--></para>
   </listitem>
   <listitem>
    <para>To allow SSH access from outside the cloud, a floating IP 
      address must be assigned to the instance. <!--For details, refer to 
      <xref linkend="sec.user.dash.inst.access.ips"/>.--></para>
   </listitem>
   <listitem>
    <para>You must know the private or public IP address of the instance. <!--To look
    it up, log in to &cloud; &dash;. On the <guimenu>Project</guimenu> tab, 
      switch to the <guimenu>Instances &amp; Volumes</guimenu> category. If only
      one IP address is shown for the instance, it is the private IP address (for
      communication inside the cloud). If a second IP address is shown, the second
      one is the public (floating) IP address.--></para>
   </listitem>
  </itemizedlist>
  
<!--
  <sect2 id="sec.user.dash.inst.manage.snapshots">
   <title>Using Instance Snapshots</title>
-->
  <para>Snapshots preserve the disk state of a running instance. 
     <remark>taroth 2012-08-21: DEVs, if I got it right, ephemeral disks are 
      generally excluded from the snapshots?</remark> You can launch a new
     instance from a snapshot or use a snapshot to create a new image based upon 
     the snapshot. 
    </para>

  <!--
  <sect2 id="sec.user.dash.inst.manage.terminate">
   <title>Pausing, Suspending, Rebooting or Terminating Instances</title>
  -->
  <para> For maintenance reasons, you can pause or suspend images&mdash;provided
   they are running on &kvm; or &xen;. Pausing or suspending avoids the consequences 
   that come with terminating an instance.</para>
  <para>If you pause an instance, the content of the virtual machine is stored
     to memory (RAM) and the image is kept running in a <quote>frozen</quote>
     state. When suspending an instance, the contents of the virtual 
     machine is stored to disk and memory and VCPUS are freed.
    </para>
  <important>
   <title>Terminating Instances: Risk of Data Loss</title>
   <para>
    <emphasis>Terminating</emphasis> an instance has the following consequences:</para>
   <itemizedlist>
    <listitem>
     <para>All data on the image's root disk and ephemeral disks are destroyed.
        To prevent that, use volumes and attach them to an instance for 
        persistent storage.</para>
    </listitem>
    <listitem>
     <para>If a floating IP address was assigned to that instance,
        the IP address is disassociated from that image. However, it is still available
        in the pool of allocated IP addresses for the current project.</para>
    </listitem>
   </itemizedlist>
  </important>

  <!--
  <sect2 id="sec.user.dash.inst.manage.usage">
   <title>Tracking Usage</title>
  -->
  
 <!--<sect1 id="sec.user.dash.volumes">
  <title>Managing Volumes</title>
 -->
  <para>Volumes are block storage devices that can be attached to instances. They
  allow for persistent storage as they can be attached to a running instance 
  (or detached and attached to another instance at any time). In contrast to the
  instance's root disk, the data of volumes is not destroyed when the instance 
  is terminated.</para>

  <para>After having created one or multiple volumes, you can attach them
  to instances. A volume can only be attached to one instance at a time. 
  <!--View the <guimenu>Status</guimenu> of a volume in the <guimenu>Instances &amp;
  Volumes</guimenu> category of the &dash;: The volume is either  
  <literal>available</literal> or already <literal>In-Use</literal>.--></para>

 </sect1>
</chapter>
